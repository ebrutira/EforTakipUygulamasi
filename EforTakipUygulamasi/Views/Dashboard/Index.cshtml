<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Talep Takip Sistemi</title>

    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .dashboard-title {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin-bottom: 2rem;
        }

            .dashboard-title h1 {
                margin: 0;
                color: #2c3e50;
                font-size: 2rem;
                font-weight: 600;
            }

            .dashboard-title p {
                color: #7f8c8d;
                margin: 0.5rem 0 0 0;
                font-size: 1rem;
            }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2.5rem;
        }

        .stat-card {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

            .stat-card.blue {
                border-left: 4px solid #a5b4fc; /* indigo-300 */
            }

            .stat-card.yellow {
                border-left: 4px solid #fcd34d; /* amber-300 */
            }

            .stat-card.green {
                border-left: 4px solid #6ee7b7; /* emerald-300 */
            }

            .stat-card.red {
                border-left: 4px solid #fda4af; /* rose-300 */
            }

        .stat-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: #334155; /* slightly stronger slate */
            margin-bottom: 0.3rem;
        }

        .stat-label {
            color: #666;
            font-weight: 500;
            font-size: 0.9rem;
        }

        .stat-icon {
            font-size: 2rem;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .charts-grid.with-sidebar {
            grid-template-columns: 3fr 2fr;
        }

        .chart-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

            .chart-card h3 {
                margin: 0 0 1rem 0;
                color: #333;
                font-size: 1.1rem;
                font-weight: 600;
            }

        .chart-container {
            height: 250px;
            position: relative;
        }

        .effort-chart {
            grid-column: 1 / -1;
        }

        

        .side-sections {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            align-self: start;
        }

        #criticalSection {
            overflow: auto;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
        }

        .metric-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

            .metric-card h3 {
                margin: 0 0 1.5rem 0;
                color: #2c3e50;
                font-size: 1.2rem;
                font-weight: 600;
            }

        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

            .metric-item:last-child {
                margin-bottom: 0;
            }

            .metric-item.blue {
                border-left: 4px solid #3498db;
            }

            .metric-item.green {
                border-left: 4px solid #27ae60;
            }

            .metric-item.orange {
                border-left: 4px solid #f39c12;
            }

            .metric-item.red {
                border-left: 4px solid #e74c3c;
            }

        .metric-label {
            color: #7f8c8d;
            font-weight: 500;
        }

        .metric-value {
            color: #2c3e50;
            font-size: 1.1rem;
            font-weight: bold;
        }

        a {
            color: inherit;
            text-decoration: none;
        }

            a:hover {
                text-decoration: underline;
            }

        /* Tabs */
        .tab-navigation {
            display: flex;
            gap: 8px;
            margin-bottom: 1rem;
            background: white;
            padding: 8px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            border: 1px solid #e2e8f0;
        }

        .tab-button {
            padding: 10px 16px;
            background: transparent;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            color: #64748b;
            border-radius: 8px;
            font-size: 0.95rem;
        }

            .tab-button:hover {
                color: #475569;
                background: rgba(100, 116, 139, 0.08);
            }

            .tab-button.active {
                color: white;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                box-shadow: 0 4px 12px rgba(99, 102, 241, 0.25);
            }

        /* Sections */
        .section-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            border: 1px solid #e2e8f0;
            margin-bottom: 1.5rem;
        }

            .section-card h3 {
                margin: 0 0 1rem 0;
                color: #334155;
                font-size: 1.1rem;
                font-weight: 700;
            }

        .simple-table {
            width: 100%;
            border-collapse: collapse;
        }

            .simple-table th, .simple-table td {
                padding: 10px 12px;
                border-bottom: 1px solid #f1f5f9;
                text-align: left;
                font-size: 0.92rem;
                color: #334155;
            }

            .simple-table th {
                color: #475569;
                font-weight: 700;
                background: #f8fafc;
            }

        .badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 0.78rem;
            font-weight: 600;
        }

        .badge-deadline {
            background: #fee2e2;
            color: #b91c1c;
        }

        .badge-warning {
            background: #fef3c7;
            color: #92400e;
        }

        .badge-ok {
            background: #e2e8f0;
            color: #475569;
        }
    </style>
</head>
<body>


    <div class="container">
        <div class="tab-navigation">
            <button class="tab-button active" data-tab="all">Tüm Talepler</button>
            <button class="tab-button" data-tab="active">Aktif Talepler</button>
            <button class="tab-button" data-tab="inactive">Talepler</button>
        </div>

        <!-- Özet İstatistikler -->
        <div class="stats-grid">
            <div class="stat-card blue">
                <div>
                    <div class="stat-value" id="totalRequests">-</div>
                    <div class="stat-label">Toplam İş</div>
                </div>
                <div class="stat-icon">📋</div>
            </div>

            <div class="stat-card yellow">
                <div>
                    <div class="stat-value" id="inProgressRequests">-</div>
                    <div class="stat-label">Aktif İş</div>
                </div>
                <div class="stat-icon">⚡</div>
            </div>

            <div class="stat-card green">
                <div>
                    <div class="stat-value" id="totalHours">-</div>
                    <div class="stat-label">Toplam Saat</div>
                </div>
                <div class="stat-icon">⏱️</div>
            </div>

            <div class="stat-card red">
                <div>
                    <div class="stat-value" id="approachingRequests">-</div>
                    <div class="stat-label">Teslimi Yaklaşan</div>
                </div>
                <div class="stat-icon">⚠️</div>
            </div>
        </div>

        <!-- Chart'lar -->
        <div class="charts-grid" id="chartsGrid">
            <!-- Durum Dağılımı -->
            <div class="chart-card" id="statusChartCard">
                <h3>📊 Durum Dağılımı</h3>
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>

            <!-- Büyüklük Dağılımı + Yan Tablolar -->
            <div class="chart-card">
                <h3>📏 İş Büyüklüğü</h3>
                <div class="chart-container">
                    <canvas id="sizeChart"></canvas>
                </div>
            </div>

            <div class="side-sections">
                <div id="criticalSection" class="section-card" style="display:none">
                    <h3>⚠️ Kritik Aktif Talepler</h3>
                    <table class="simple-table">
                        <thead>
                            <tr>
                                <th>İş</th>
                                <th>Deadline</th>
                                <th>Durum</th>
                                <th>Kalan</th>
                            </tr>
                        </thead>
                        <tbody id="criticalTableBody"></tbody>
                    </table>
                </div>

                <div id="recentCompletedSection" class="section-card" style="display:none">
                    <h3>✅ Son Tamamlananlar</h3>
                    <table class="simple-table">
                        <thead>
                            <tr>
                                <th>İş</th>
                                <th>Tamamlanma</th>
                                <th>Toplam Saat</th>
                                <th>Detay</th>
                            </tr>
                        </thead>
                        <tbody id="recentCompletedTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Efor Analizi -->
            <div class="chart-card effort-chart">
                <h3>⏱️ Efor Dağılımı (Saatler)</h3>
                <div class="chart-container">
                    <canvas id="effortChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Dinamik Sekme İçerikleri -->
        <div id="criticalSection" class="section-card" style="display:none">
            <h3>⚠️ Kritik Aktif Talepler</h3>
            <table class="simple-table">
                <thead>
                    <tr>
                        <th>İş</th>
                        <th>Deadline</th>
                        <th>Durum</th>
                        <th>Kalan</th>
                    </tr>
                </thead>
                <tbody id="criticalTableBody"></tbody>
            </table>
        </div>

        <div id="recentCompletedSection" class="section-card" style="display:none">
            <h3>✅ Son Tamamlananlar</h3>
            <table class="simple-table">
                <thead>
                    <tr>
                        <th>İş</th>
                        <th>Tamamlanma</th>
                        <th>Toplam Saat</th>
                        <th>Detay</th>
                    </tr>
                </thead>
                <tbody id="recentCompletedTableBody"></tbody>
            </table>
        </div>

    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>


    <script>
        let allRequestsData = [];
        let currentTab = 'all';
        let statusChartInstance = null;
        let sizeChartInstance = null;
        let effortChartInstance = null;

        document.addEventListener('DOMContentLoaded', function () {
            console.log('Dashboard yükleniyor...');

            bindTabEvents();
            loadDashboardData();
        });

        function bindTabEvents() {
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(btn => {
                btn.addEventListener('click', function () {
                    if (this.classList.contains('active')) return;
                    tabButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    const selected = this.getAttribute('data-tab');
                    renderTab(selected);
                });
            });
        }

        function loadDashboardData() {
            console.log('API çağrısı yapılıyor...');

            fetch('/Request/GetAllJson', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('✅ API başarılı:', data);
                if (data && Array.isArray(data) && data.length > 0) {
                    allRequestsData = data;
                    renderTab('all');
                } else if (data && data.error) {
                    console.error('❌ API Hatası:', data.error);
                    showErrorState();
                } else {
                    console.log('⚠️ Boş veri');
                    showEmptyState();
                }
            })
            .catch(error => {
                console.error('❌ Fetch Hatası:', error);
                console.log('🧪 Test verisi ile çalışıyor...');
                useTestData();
            });
        }

        function useTestData() {
            const testData = [
                {
                    Id: 1,
                    Name: "Test İş 1",
                    Status: 2,
                    TotalHours: 40,
                    AnalystHours: 10,
                    DeveloperHours: 25,
                    KKTHours: 5,
                    PreprodHours: 0,
                    CreatedDate: new Date().toISOString(),
                    Deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
                },
                {
                    Id: 2,
                    Name: "Test İş 2",
                    Status: 5,
                    TotalHours: 20,
                    AnalystHours: 8,
                    DeveloperHours: 10,
                    KKTHours: 2,
                    PreprodHours: 0,
                    CreatedDate: new Date().toISOString(),
                    Deadline: null
                }
            ];

            console.log('🧪 Test verisi kullanılıyor:', testData);
            allRequestsData = testData;
            renderTab('all');
        }

        function getProp(obj, prop) {
            return obj[prop] ?? obj[prop.charAt(0).toUpperCase() + prop.slice(1)];
        }

        function updateStats(requests) {
            const totalRequests = requests.length;
            const inProgressRequests = requests.filter(r => getProp(r, 'status') === 2).length;
            const totalHours = requests.reduce((sum, r) => sum + (getProp(r, 'totalHours') || 0), 0);

            // Yaklaşan deadline hesabı (2 hafta içinde)
            const approachingRequests = requests.filter(r => {
                const deadline = getProp(r, 'deadline');
                if (!deadline) return false;
                const diffDays = (new Date(deadline) - new Date()) / (1000 * 60 * 60 * 24);
                return diffDays > 0 && diffDays <= 14 && (getProp(r, 'status') === 2 || getProp(r, 'status') === 3);
            }).length;

            document.getElementById('totalRequests').textContent = Number(totalRequests).toLocaleString('tr-TR');
            document.getElementById('inProgressRequests').textContent = Number(inProgressRequests).toLocaleString('tr-TR');
            document.getElementById('totalHours').textContent = Math.round(totalHours).toLocaleString('tr-TR');
            document.getElementById('approachingRequests').textContent = Number(approachingRequests).toLocaleString('tr-TR');
        }

        function renderTab(tabKey) {
            currentTab = tabKey;
            const filtered = filterDataByTab(allRequestsData, tabKey);
            updateStats(filtered);
            const showStatus = tabKey === 'all';
            toggleStatusChart(showStatus);
            if (showStatus) createStatusChart(filtered); else destroyStatusChart();
            createSizeChart(filtered);
            createEffortChart(filtered);
            const grid = document.getElementById('chartsGrid');
            if (tabKey === 'active') {
                grid && grid.classList.add('with-sidebar');
                renderCriticalSection(filtered);
                toggleSection('criticalSection', true);
                toggleSection('recentCompletedSection', false);
            } else if (tabKey === 'inactive') {
                grid && grid.classList.add('with-sidebar');
                renderRecentCompletedSection(allRequestsData);
                toggleSection('criticalSection', false);
                toggleSection('recentCompletedSection', true);
            } else {
                grid && grid.classList.remove('with-sidebar');
                toggleSection('criticalSection', false);
                toggleSection('recentCompletedSection', false);
            }
        }

        function filterDataByTab(data, tabKey) {
            if (!Array.isArray(data)) return [];
            if (tabKey === 'active') {
                return data.filter(r => [2, 3].includes(getProp(r, 'status')));
            }
            if (tabKey === 'inactive') {
                return data.filter(r => ![2, 3].includes(getProp(r, 'status')));
            }
            return data;
        }

        function toggleStatusChart(show) {
            const card = document.getElementById('statusChartCard');
            if (!card) return;
            card.style.display = show ? '' : 'none';
        }

        function toggleSection(id, show) {
            const el = document.getElementById(id);
            if (!el) return;
            el.style.display = show ? '' : 'none';
        }

        function statusText(code) {
            const c = Number(code);
            switch (c) {
                case 1: return 'Havuz';
                case 2: return 'Yürütme';
                case 3: return 'Test';
                case 5: return 'Tamamlandı';
                case 6: return 'İptal';
                default: return 'Diğer';
            }
        }

        function daysDiff(from, to) {
            const ms = to - from;
            return Math.floor(ms / (1000 * 60 * 60 * 24));
        }

        function renderCriticalSection(activeRequests) {
            const tbody = document.getElementById('criticalTableBody');
            if (!tbody) return;
            const now = new Date();

            const rows = activeRequests
                .filter(r => getProp(r, 'deadline'))
                .map(r => {
                    const deadline = new Date(getProp(r, 'deadline'));
                    const diff = daysDiff(now, deadline);
                    const overdue = deadline < now;
                    const near = diff >= 0 && diff <= 7;
                    return { r, deadline, diff, overdue, near };
                })
                .filter(x => x.overdue || x.near)
                .sort((a, b) => a.deadline - b.deadline)
                .slice(0, 10);

            if (rows.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" style="color:#64748b">Kritik aktif talep yok.</td></tr>';
                return;
            }

            tbody.innerHTML = rows.map(x => {
                const name = getProp(x.r, 'name');
                const id = getProp(x.r, 'id');
                const status = statusText(getProp(x.r, 'status'));
                const dateStr = x.deadline.toLocaleDateString('tr-TR');
                const badge = x.overdue ? `<span class="badge badge-deadline">Gecikmiş</span>` : `<span class="badge badge-warning">${x.diff} gün</span>`;
                return `
                    <tr>
                        <td><a href="/Request/Details/${id}">${name}</a></td>
                        <td>${dateStr}</td>
                        <td>${status}</td>
                        <td>${badge}</td>
                    </tr>
                `;
            }).join('');
        }

        function renderRecentCompletedSection(allData) {
            const tbody = document.getElementById('recentCompletedTableBody');
            if (!tbody) return;

            const items = (allData || [])
                .filter(r => Number(getProp(r, 'status')) === 5)
                .map(r => {
                    const completed = getProp(r, 'completedDate') ? new Date(getProp(r, 'completedDate')) : (getProp(r, 'updatedDate') ? new Date(getProp(r, 'updatedDate')) : new Date(getProp(r, 'createdDate')));
                    return { r, completed };
                })
                .sort((a, b) => b.completed - a.completed)
                .slice(0, 4);

            if (items.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" style="color:#64748b">Tamamlanan kayıt yok.</td></tr>';
                return;
            }

            tbody.innerHTML = items.map(x => {
                const name = getProp(x.r, 'name');
                const id = getProp(x.r, 'id');
                const dateStr = x.completed.toLocaleDateString('tr-TR');
                const total = Math.round(getProp(x.r, 'totalHours') || 0).toLocaleString('tr-TR');
                return `
                    <tr>
                        <td><a href="/Request/Details/${id}">${name}</a></td>
                        <td>${dateStr}</td>
                        <td>${total}</td>
                        <td><a href="/Request/Details/${id}">Görüntüle</a></td>
                    </tr>
                `;
            }).join('');
        }

        function createStatusChart(requests) {
            const statusCounts = {
                new: requests.filter(r => getProp(r, 'status') === 1).length,
                inProgress: requests.filter(r => getProp(r, 'status') === 2 || getProp(r, 'status') === 3).length,
                completed: requests.filter(r => getProp(r, 'status') === 5).length
            };

            const ctx = document.getElementById('statusChart');
            if (ctx && typeof Chart !== 'undefined') {
                if (statusChartInstance) { statusChartInstance.destroy(); statusChartInstance = null; }
                statusChartInstance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Havuz', 'Yürütme', 'Tamamlandı'],
                        datasets: [{
                            data: [statusCounts.new, statusCounts.inProgress, statusCounts.completed],
                            backgroundColor: ['#f59e0b', '#6366f1', '#34d399'],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
            }
        }

        function createSizeChart(requests) {
            const sizeCounts = { FastTrack: 0, XS: 0, S: 0, M: 0, L: 0, XL: 0 };

            requests.forEach(r => {
                const totalHours = (getProp(r, 'analystHours') || 0) +
                    (getProp(r, 'developerHours') || 0) +
                    (getProp(r, 'kktHours') || 0) +
                    (getProp(r, 'preprodHours') || 0);
                const days = totalHours / 7;

                let size = 'FastTrack';
                if (days <= 5) size = 'FastTrack';
                else if (days <= 10) size = 'XS';
                else if (days <= 25) size = 'S';
                else if (days <= 50) size = 'M';
                else if (days <= 100) size = 'L';
                else size = 'XL';

                sizeCounts[size]++;
            });

            const ctx = document.getElementById('sizeChart');
            if (ctx && typeof Chart !== 'undefined') {
                if (sizeChartInstance) { sizeChartInstance.destroy(); sizeChartInstance = null; }
                sizeChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(sizeCounts),
                        datasets: [{
                            label: 'İş Sayısı',
                            data: Object.values(sizeCounts),
                            backgroundColor: ['#34d399', '#6ee7b7', '#f59e0b', '#fb923c', '#6366f1', '#f472b6'],
                            borderRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { stepSize: 1 }
                            },
                            x: {
                                grid: { display: false }
                            }
                        }
                    }
                });
            }
        }

        function createEffortChart(requests) {
            let analystTotal = 0, devTotal = 0, kktTotal = 0, preprodTotal = 0, tasimaTotal = 0;

            requests.forEach(r => {
                analystTotal += getProp(r, 'analystHours') || 0;
                devTotal += getProp(r, 'developerHours') || 0;
                kktTotal += getProp(r, 'kktHours') || 0;
                preprodTotal += getProp(r, 'preprodHours') || 0;
                tasimaTotal += getProp(r, 'tasimaHours') || 0;
            });

            const ctx = document.getElementById('effortChart');
            if (ctx && typeof Chart !== 'undefined') {
                if (effortChartInstance) { effortChartInstance.destroy(); effortChartInstance = null; }
                effortChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['Analiz', 'Yazılım', 'Test/Preprod', 'KKT/Preprod/Taşıma'],
                        datasets: [{
                            label: 'Toplam Saat',
                            data: [analystTotal, devTotal, (kktTotal + preprodTotal), tasimaTotal],
                            backgroundColor: ['#6366f1', '#34d399', '#f59e0b', '#f472b6'],
                            borderRadius: 6
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0,0,0,0.1)' }
                            },
                            x: {
                                grid: { display: false }
                            }
                        }
                    }
                });
            }
        }

        function destroyStatusChart() {
            if (statusChartInstance) { statusChartInstance.destroy(); statusChartInstance = null; }
        }

        function showEmptyState() {
            document.getElementById('totalRequests').textContent = '0';
            document.getElementById('inProgressRequests').textContent = '0';
            document.getElementById('totalHours').textContent = '0';
            document.getElementById('approachingRequests').textContent = '0';
        }

        function showErrorState() {
            document.getElementById('totalRequests').textContent = 'Hata';
            document.getElementById('inProgressRequests').textContent = 'Hata';
            document.getElementById('totalHours').textContent = 'Hata';
            document.getElementById('approachingRequests').textContent = 'Hata';
        }
    </script>
</body>
</html>