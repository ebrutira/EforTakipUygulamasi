@model IEnumerable<EforTakipUygulamasi.Models.Request>
@{
    ViewData["Title"] = ViewBag.PageTitle ?? "Talepler";
    var isActivePage = (bool)(ViewBag.IsActivePage ?? false);
}

<div class="container">
    <!-- Tab Navigation -->
    <div class="tab-navigation">
        <a href="@Url.Action("Index")" class="tab-button @(!isActivePage ? "active" : "")">
            📋 Talepler
        </a>
        <a href="@Url.Action("Active")" class="tab-button @(isActivePage ? "active" : "")">
            ⚡ Aktif Talepler
        </a>
    </div>

    <!-- Başarı/Hata Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="notification show" id="successNotification">
            <button class="close-btn" onclick="hideNotification('successNotification')">&times;</button>
            <span>@TempData["SuccessMessage"]</span>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="notification show" id="errorNotification" style="background: #e53e3e;">
            <button class="close-btn" onclick="hideNotification('errorNotification')">&times;</button>
            <span>@TempData["ErrorMessage"]</span>
        </div>
    }

    <!-- Dashboard Stats -->
    <div class="dashboard-stats">
        <div class="stat-card">
            <div class="stat-value" id="totalItems">@Model.Count()</div>
            <div class="stat-label">@(isActivePage ? "Aktif İş" : "Toplam İş")</div>
        </div>
        @if (isActivePage)
        {
            <div class="stat-card">
                <div class="stat-value" id="inProgress">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.InProgress)</div>
                <div class="stat-label">Devam Eden</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="testing">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Testing)</div>
                <div class="stat-label">Test</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalManDays">@(Math.Round(Model.Sum(r => r.TotalHours) / 8, 1))</div>
                <div class="stat-label">Toplam Adam-Gün</div>
            </div>
        }
        else
        {
            <div class="stat-card">
                <div class="stat-value" id="pending">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.New)</div>
                <div class="stat-label">Bekleyen</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="completed">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Completed)</div>
                <div class="stat-label">Tamamlandı</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="cancelled">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Cancelled)</div>
                <div class="stat-label">İptal</div>
            </div>
        }
    </div>

    <!-- Controls -->
    <div class="controls">
        <div class="filter-group">
            <select class="select" id="sortSelect">
                @if (isActivePage)
                {
                    <option value="deadline">Teslim Tarihine Göre</option>
                    <option value="priority">Önceliğe Göre</option>
                    <option value="size">İş Büyüklüğüne Göre</option>
                    <option value="name">İsme Göre</option>
                }
                else
                {
                    <option value="smart">Akıllı Sıralama</option>
                    <option value="status">Duruma Göre</option>
                    <option value="date">Tarihe Göre</option>
                    <option value="name">İsme Göre</option>
                }
            </select>

            <select class="select" id="statusFilter">
                <option value="">Tüm Durumlar</option>
                @if (isActivePage)
                {
                    <option value="2">Devam Eden</option>
                    <option value="3">Test</option>
                }
                else
                {
                    <option value="1">Bekleyen</option>
                    <option value="5">Tamamlandı</option>
                    <option value="6">İptal</option>
                }
            </select>

            <input type="text" class="input" placeholder="İş ara..." id="searchInput">
        </div>
        <a href="@Url.Action("Create")" class="btn btn-primary">+ Yeni İş Ekle</a>
    </div>

    <!-- Work Items Table -->
    <div class="work-items">
        <div class="table-header">
            <div>Proje ID / İş Başlığı</div>
            <div>Durum</div>
            <div>İş Büyüklüğü</div>
            <div>Analiz</div>
            <div>Yazılım</div>
            <div>KKT</div>
            @if (isActivePage)
            {
                <div>Adam-Gün</div>
            }
            else
            {
                <div>Toplam Saat</div>
            }
            <div>Teslim Tarihi</div>
        </div>
        <div id="workItemsList">
            @if (Model != null && Model.Any())
            {
                @foreach (var request in Model)
                {
                    <div class="work-item"
                         data-id="@request.Id"
                         data-status="@((int)request.Status)"
                         data-priority="@((int)request.Priority)"
                         data-deadline="@(request.Deadline?.ToString("yyyy-MM-dd") ?? "")"
                         data-total-hours="@request.TotalHours"
                         data-name="@request.Name"
                         data-project-id="@(request.ProjectId ?? "")"
                         data-description="@(request.Description ?? "")"
                         data-assignee="@(request.Assignee ?? "")"
                         onclick="editRequest(@request.Id)">
                        <div class="work-title">
                            @if (!string.IsNullOrEmpty(request.ProjectId))
                            {
                                <div style="font-size: 0.8rem; color: #667eea; font-weight: bold; margin-bottom: 0.2rem;">
                                    #@request.ProjectId
                                </div>
                            }
                            <div style="display: flex; align-items: center; gap: 6px;">
                                <span>@request.Name</span>
                                <span class="file-indicator" data-request-id="@request.Id" style="display: none;">
                                    <i class="fas fa-paperclip" style="color: #667eea; font-size: 0.9rem;" title="Bu projede dosya var"></i>
                                </span>
                            </div>
                        </div>
                        <div onclick="event.stopPropagation();">
                            <select class="inline-status-select" onchange="changeStatus(@request.Id, this.value)">
                                @{
                                    var currentStatus = (int)request.Status;
                                }
                                @if (currentStatus == 1)
                                {
                                    <option value="1" selected>Bekleyen</option>
                                }
                                else
                                {
                                    <option value="1">Bekleyen</option>
                                }

                                @if (currentStatus == 2)
                                {
                                    <option value="2" selected>Devam Eden</option>
                                }
                                else
                                {
                                    <option value="2">Devam Eden</option>
                                }

                                @if (currentStatus == 3)
                                {
                                    <option value="3" selected>Test</option>
                                }
                                else
                                {
                                    <option value="3">Test</option>
                                }

                                @if (currentStatus == 5)
                                {
                                    <option value="5" selected>Tamamlandı</option>
                                }
                                else
                                {
                                    <option value="5">Tamamlandı</option>
                                }

                                @if (currentStatus == 6)
                                {
                                    <option value="6" selected>İptal</option>
                                }
                                else
                                {
                                    <option value="6">İptal</option>
                                }
                            </select>
                        </div>
                        <div>
                            <span class="difficulty-badge @GetSizeBadgeClass(request.Size)">
                                @request.Size
                            </span>
                        </div>
                        <div class="effort-hours">@request.AnalystHours.ToString("F1")h</div>
                        <div class="effort-hours">@request.DeveloperHours.ToString("F1")h</div>
                        <div class="effort-hours">@request.KKTHours.ToString("F1")h</div>
                        @if (isActivePage)
                        {
                            <div class="man-days-badge">@Math.Round(request.TotalHours / 8, 1) gün</div>
                        }
                        else
                        {
                            <div class="effort-hours"><strong>@request.TotalHours.ToString("F1")h</strong></div>
                        }
                        <div class="deadline @GetDeadlineClass(request.Deadline) @((request.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Completed || request.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Cancelled) ? "completed-task" : "")">
                            @(request.Deadline?.ToString("dd.MM.yyyy") ?? "-")
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="text-align: center; padding: 3rem; color: #999;">
                    <i class="fas fa-inbox fa-3x" style="margin-bottom: 1rem;"></i>
                    <p>@(isActivePage ? "Aktif iş bulunmuyor." : "Henüz iş bulunmuyor.")</p>
                    <a href="@Url.Action("Create")" class="btn btn-primary" style="margin-top: 1rem;">İlk İşi Oluştur</a>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetSizeBadgeClass(EforTakipUygulamasi.Common.TShirtSizeEnum size)
    {
        return size switch
        {
            EforTakipUygulamasi.Common.TShirtSizeEnum.FastTrack => "diff-1",
            EforTakipUygulamasi.Common.TShirtSizeEnum.XS => "diff-1",
            EforTakipUygulamasi.Common.TShirtSizeEnum.S => "diff-2",
            EforTakipUygulamasi.Common.TShirtSizeEnum.M => "diff-3",
            EforTakipUygulamasi.Common.TShirtSizeEnum.L => "diff-4",
            EforTakipUygulamasi.Common.TShirtSizeEnum.XL => "diff-5",
            _ => "diff-2"
        };
    }

    string GetDeadlineClass(DateTime? deadline)
    {
        if (!deadline.HasValue) return "deadline-normal";

        var diffDays = (deadline.Value.Date - DateTime.Today).Days;

        if (diffDays < 0) return "deadline-overdue";
        if (diffDays <= 14) return "deadline-critical";
        if (diffDays <= 28) return "deadline-warning";
        if (diffDays <= 42) return "deadline-caution";
        return "deadline-normal";
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            checkFileStatus();
            applySorting();
            document.getElementById('sortSelect').addEventListener('change', filterAndSort);
            document.getElementById('statusFilter').addEventListener('change', filterAndSort);
            document.getElementById('searchInput').addEventListener('input', filterAndSort);

            setTimeout(function() {
                var notifications = document.getElementsByClassName('notification');
                for (var i = 0; i < notifications.length; i++) {
                    notifications[i].classList.remove('show');
                }
            }, 3000);
        });

        // Dosya durumu kontrol et - SADECE MAVİ
        function checkFileStatus() {
            var workItems = document.querySelectorAll('.work-item');
            workItems.forEach(function(item) {
                var requestId = item.getAttribute('data-id');
                var fileIndicator = item.querySelector('.file-indicator');
                if (requestId && fileIndicator) {
                    fetch('/Request/GetFiles?requestId=' + requestId)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.files && data.files.length > 0) {
                                fileIndicator.style.display = 'inline-block';
                                fileIndicator.title = data.files.length + ' dosya var';
                                // Sadece mavi renk
                                var icon = fileIndicator.querySelector('i');
                                icon.style.color = '#667eea';
                            } else {
                                fileIndicator.style.display = 'none';
                            }
                        })
                        .catch(error => {
                            fileIndicator.style.display = 'none';
                        });
                }
            });
        }

        function changeStatus(requestId, newStatus) {
            fetch('@Url.Action("ChangeStatus")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'id=' + requestId + '&newStatus=' + newStatus
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    if (data.needsPageRefresh) {
                        setTimeout(function() { location.reload(); }, 1500);
                    }
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Durum güncellenirken hata oluştu.', 'error');
            });
        }

        function showNotification(message, type) {
            var notification = document.createElement('div');
            notification.className = 'notification show';
            notification.style.background = type === 'success' ? '#48bb78' : '#e53e3e';
            notification.innerHTML = '<button class="close-btn" onclick="this.parentElement.remove()">&times;</button><span>' + message + '</span>';

            document.body.appendChild(notification);

            setTimeout(function() {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }

        function applySorting() {
            const sortType = document.getElementById('sortSelect').value;
            const isActivePage = @Html.Raw(Json.Serialize(isActivePage));

            var workItems = document.querySelectorAll('.work-item');
            var items = [];

            workItems.forEach(function(item) {
                items.push({
                    element: item,
                    status: parseInt(item.getAttribute('data-status')),
                    priority: parseInt(item.getAttribute('data-priority')),
                    deadline: item.getAttribute('data-deadline'),
                    totalHours: parseFloat(item.getAttribute('data-total-hours') || 0),
                    name: item.getAttribute('data-name'),
                    projectId: item.getAttribute('data-project-id')
                });
            });

            items.sort(function(a, b) {
                if (isActivePage) {
                    switch (sortType) {
                        case 'deadline':
                            return compareByDeadline(a, b);
                        case 'priority':
                            return b.priority - a.priority;
                        case 'size':
                            return compareBySize(a, b);
                        case 'name':
                            return a.name.localeCompare(b.name);
                        default:
                            return compareByDeadline(a, b);
                    }
                } else {
                    switch (sortType) {
                        case 'status':
                            if (a.status === 1 && b.status !== 1) return -1;
                            if (a.status !== 1 && b.status === 1) return 1;
                            if (a.status === 5 && b.status === 6) return -1;
                            if (a.status === 6 && b.status === 5) return 1;
                            return 0;
                        case 'date':
                            return new Date(b.deadline || '1900-01-01') - new Date(a.deadline || '1900-01-01');
                        case 'name':
                            return a.name.localeCompare(b.name);
                        default:
                            return smartSort(a, b);
                    }
                }
            });

            var container = document.getElementById('workItemsList');
            items.forEach(function(item) {
                container.appendChild(item.element);
            });
        }

        function smartSort(a, b) {
            if (a.status === 1 && b.status !== 1) return -1;
            if (a.status !== 1 && b.status === 1) return 1;
            if (a.status === 5 && b.status === 6) return -1;
            if (a.status === 6 && b.status === 5) return 1;
            return 0;
        }

        function compareByDeadline(a, b) {
            if (!a.deadline && !b.deadline) return 0;
            if (!a.deadline) return 1;
            if (!b.deadline) return -1;
            return new Date(a.deadline) - new Date(b.deadline);
        }

        function compareBySize(a, b) {
            return b.totalHours - a.totalHours;
        }

        function filterAndSort() {
            var searchTerm = document.getElementById('searchInput').value.toLowerCase();
            var statusFilter = document.getElementById('statusFilter').value;

            var workItems = document.querySelectorAll('#workItemsList .work-item');
            workItems.forEach(function(item) {
                var name = item.getAttribute('data-name').toLowerCase();
                var description = (item.getAttribute('data-description') || '').toLowerCase();
                var projectId = (item.getAttribute('data-project-id') || '').toLowerCase();
                var status = item.getAttribute('data-status').toString();

                var matchesSearch = !searchTerm ||
                    name.includes(searchTerm) ||
                    description.includes(searchTerm) ||
                    projectId.includes(searchTerm);

                var matchesStatus = !statusFilter || status === statusFilter;

                if (matchesSearch && matchesStatus) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });

            applySorting();
        }

                function editRequest(id) {
            window.location.href = '@Url.Action("Details", "Request")/' + id;
        }
        

        function hideNotification(id) {
            var element = document.getElementById(id);
            if (element) {
                element.classList.remove('show');
            }
        }
    </script>
}