@model EforTakipUygulamasi.Models.Request
@{
    ViewData["Title"] = "İş Düzenle";
}

<div class="container">
    <div class="modal-content" style="position: static; margin: 0; max-width: none; box-shadow: none;">
        <h2>İş Düzenle - #@(Model.ProjectId ?? Model.Id.ToString())</h2>

        <form asp-action="Edit" id="workForm">
            <input asp-for="Id" type="hidden" />
            <input asp-for="CreatedBy" type="hidden" />
            <input asp-for="CreatedDate" type="hidden" />

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Proje ID ve İş Başlığı -->
            <div class="form-row" style="display: flex; gap: 0.5rem; align-items: flex-end;">
                <div class="form-group" style="max-width: 180px;">
                    <label asp-for="ProjectId" class="form-label">Proje ID</label>
                    <input asp-for="ProjectId" class="form-input project-id-field" maxlength="7" />
                    <span asp-validation-for="ProjectId" class="text-danger"></span>
                </div>
                <div class="form-group" style="flex: 1;">
                    <label asp-for="Name" class="form-label">İş Başlığı</label>
                    <input asp-for="Name" class="form-input" required />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="form-label">Açıklama</label>
                <textarea asp-for="Description" class="form-input textarea"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Status" class="form-label">Durum</label>
                    <select asp-for="Status" class="form-input">
                        <option value="1">Havuz</option>
                        <option value="2">Yürütme</option>
                        <option value="5">Tamamlandı</option>
                        <option value="6">İptal</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Priority" class="form-label">Öncelik</label>
                    <select asp-for="Priority" class="form-input">
                        <option value="1">Düşük</option>
                        <option value="2">Orta</option>
                        <option value="3">Yüksek</option>
                        <option value="4">Kritik</option>
                    </select>
                    <span asp-validation-for="Priority" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Deadline" class="form-label">Yaygınlaştırma tarihi</label>
                    <input asp-for="Deadline" type="date" class="form-input" />
                    <span asp-validation-for="Deadline" class="text-danger"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="AnalystHours" class="form-label">Analiz Saati</label>
                    <input asp-for="AnalystHours" type="number" step="0.5" min="0" class="form-input" />
                    <span asp-validation-for="AnalystHours" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DeveloperHours" class="form-label">Yazılımcı Saati</label>
                    <input asp-for="DeveloperHours" type="number" step="0.5" min="0" class="form-input" />
                    <span asp-validation-for="DeveloperHours" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="KKTHours" class="form-label">Test/Preprod Saati</label>
                    <input asp-for="KKTHours" type="number" step="0.5" min="0" class="form-input" />
                    <span asp-validation-for="KKTHours" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="TasimaHours" class="form-label">KKT/Preprod/Taşıma Saati</label>
                    <input asp-for="TasimaHours" type="number" step="0.5" min="0" class="form-input" />
                    <span asp-validation-for="TasimaHours" class="text-danger"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="KKTDeadline" class="form-label">Tarih</label>
                    <input asp-for="KKTDeadline" type="date" class="form-input" />
                    <span asp-validation-for="KKTDeadline" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AzureNumber" class="form-label">Azure Numarası</label>
                    <input asp-for="AzureNumber" type="number" class="form-input" />
                    <span asp-validation-for="AzureNumber" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label class="form-label">Toplam Saat</label>
                    <div class="form-input" style="background: #f7fafc; font-weight: bold;" id="totalHoursDisplay">@Model.TotalHours.ToString("F1")</div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Adam-Gün</label>
                    <div class="form-input" style="background: #f7fafc;" id="manDaysDisplay">@Model.TotalManDays.ToString("F1")</div>
                </div>
                <div class="form-group">
                    <label class="form-label">İş Büyüklüğü</label>
                    <div class="form-input" style="background: #f7fafc;" id="sizeDisplay">@Model.Size</div>
                </div>
                <div class="form-group">
                    <!-- Boş -->
                </div>
            </div>

            <!-- Dosya Yönetimi -->
            <div class="form-group">
                <label class="form-label">📁 Dosya Yönetimi</label>

                <!-- Mevcut Dosyalar -->
                <div id="existingFiles" style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h4 style="font-size: 1rem; color: #475569; margin: 0;">
                            Mevcut Dosyalar
                            <span id="fileCount" style="color: #667eea; font-weight: normal;">(Yükleniyor...)</span>
                        </h4>
                        <button type="button" onclick="loadExistingFiles()" class="btn btn-sm" style="background: #f1f5f9; color: #475569; border: 1px solid #e2e8f0;">
                            <i class="fas fa-refresh"></i> Yenile
                        </button>
                    </div>
                    <div id="filesList" style="max-height: 300px; overflow-y: auto; border: 1px solid #e2e8f0; border-radius: 8px; padding: 8px; background: #f8fafc;">
                        <div style="text-align: center; padding: 2rem; color: #94a3b8;">
                            <i class="fas fa-spinner fa-spin"></i> Dosyalar yükleniyor...
                        </div>
                    </div>
                </div>

                <!-- Yeni Dosya Yükleme -->
                <div style="border-top: 2px solid #e2e8f0; padding-top: 1.5rem;">
                    <h4 style="font-size: 1rem; color: #475569; margin-bottom: 1rem;">Yeni Dosya Ekle</h4>
                    <div class="file-upload-area" id="fileUploadArea">
                        <div style="text-align: center;">
                            <i class="fas fa-cloud-upload-alt fa-3x" style="color: #667eea; margin-bottom: 1rem;"></i>
                            <p style="margin: 0 0 0.5rem 0; font-weight: 600; color: #1e293b;">
                                Dosyaları buraya sürükleyin veya <span style="color: #667eea;">tıklayın</span>
                            </p>
                            <p style="font-size: 0.875rem; color: #64748b; margin: 0;">
                                <strong>Desteklenen formatlar:</strong> DOC, DOCX, PDF, CSV, XLS, XLSX, PNG, JPG<br>
                                <strong>Maksimum boyut:</strong> 10MB
                            </p>
                        </div>
                        <input type="file" id="fileInput" multiple accept=".doc,.docx,.pdf,.xls,.xlsx,.png,.jpg,.jpeg,.csv" style="display: none;">
                    </div>
                    <div class="file-list" id="newFileList"></div>
                </div>
            </div>

            <!-- Meta Bilgiler -->
            <div class="form-row" style="border-top: 2px solid #e2e8f0; padding-top: 1.5rem; margin-top: 2rem;">
                <div class="form-group">
                    <label class="form-label">Oluşturan</label>
                    <div class="form-input" style="background: #f8fafc;">👤 @Model.CreatedBy</div>
                </div>
                <div class="form-group">
                    <label class="form-label">Oluşturma Tarihi</label>
                    <div class="form-input" style="background: #f8fafc;">📅 @Model.CreatedDate.ToString("dd.MM.yyyy HH:mm")</div>
                </div>
                <div class="form-group">
                    <label class="form-label">Son Değişiklik</label>
                    <div class="form-input" style="background: #f8fafc;">⏰ @Model.LastModified.ToString("dd.MM.yyyy HH:mm")</div>
                </div>
            </div>

            <!-- Form Butonları -->
            <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2.5rem; padding-top: 1.5rem; border-top: 1px solid #e2e8f0;">
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-times"></i> İptal
                </a>
                <a href="@Url.Action("Delete", new { id = Model.Id })" class="btn" style="background: #ef4444; color: white;" onclick="return confirm('Bu işi silmek istediğinizden emin misiniz?')">
                    <i class="fas fa-trash"></i> Sil
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Güncelle
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Edit sayfası yüklendi, Request ID: @Model.Id');

            // Sayfa yüklendiğinde çalışacak fonksiyonlar
            loadExistingFiles();
            calculateTotalHours();
            setupFileUpload();
            setupFormEvents();
        });

        // Form event'lerini ayarla
        function setupFormEvents() {
            // Proje ID otomatik büyük harf
            var projectIdField = document.getElementById('ProjectId');
            if (projectIdField) {
                projectIdField.addEventListener('input', function() {
                    this.value = this.value.toUpperCase();
                });
            }

            // Hour input event listeners
            var hourInputs = document.querySelectorAll('[name="AnalystHours"], [name="DeveloperHours"], [name="KKTHours"], [name="TasimaHours"]');
            hourInputs.forEach(function(input) {
                input.addEventListener('change', calculateTotalHours);
                input.addEventListener('input', calculateTotalHours);
            });
        }

        // Toplam saat hesaplama
        function calculateTotalHours() {
            var analyst = parseFloat(document.querySelector('[name="AnalystHours"]').value) || 0;
            var developer = parseFloat(document.querySelector('[name="DeveloperHours"]').value) || 0;
            var kkt = parseFloat(document.querySelector('[name="KKTHours"]').value) || 0;
            var tasima = parseFloat(document.querySelector('[name="TasimaHours"]').value) || 0;
            var total = analyst + developer + kkt + tasima;
            var manDays = total / 7;

            document.getElementById('totalHoursDisplay').textContent = total.toFixed(1);
            document.getElementById('manDaysDisplay').textContent = manDays.toFixed(1);

            var size = 'FastTrack';
            if (manDays <= 5) size = 'FastTrack';
            else if (manDays <= 10) size = 'XS';
            else if (manDays <= 25) size = 'S';
            else if (manDays <= 50) size = 'M';
            else if (manDays <= 100) size = 'L';
            else size = 'XL';

            document.getElementById('sizeDisplay').textContent = size;
        }

        // Mevcut dosyaları yükle
        function loadExistingFiles() {
            console.log('Dosyalar yükleniyor...');

            fetch('/Request/GetFiles?requestId=@Model.Id')
                .then(response => {
                    console.log('GetFiles response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('GetFiles response:', data);
                    if (data.success) {
                        displayExistingFiles(data.files);
                    } else {
                        console.error('Dosyalar yüklenemedi:', data.message);
                        document.getElementById('fileCount').textContent = '(Hata: ' + data.message + ')';
                        document.getElementById('filesList').innerHTML =
                            '<div style="text-align: center; padding: 2rem; color: #ef4444;">' +
                                '<i class="fas fa-exclamation-triangle"></i> Dosyalar yüklenemedi: ' + data.message +
                            '</div>';
                    }
                })
                .catch(error => {
                    console.error('Dosya listesi alınamadı:', error);
                    document.getElementById('fileCount').textContent = '(Bağlantı Hatası)';
                    document.getElementById('filesList').innerHTML =
                        '<div style="text-align: center; padding: 2rem; color: #ef4444;">' +
                            '<i class="fas fa-wifi"></i> Bağlantı hatası' +
                        '</div>';
                });
        }

        // Mevcut dosyaları görüntüle
        function displayExistingFiles(files) {
            var filesList = document.getElementById('filesList');
            var fileCount = document.getElementById('fileCount');

            if (files.length === 0) {
                filesList.innerHTML =
                    '<div style="text-align: center; padding: 2rem; color: #94a3b8;">' +
                        '<i class="fas fa-folder-open fa-2x" style="margin-bottom: 0.5rem;"></i><br>' +
                        'Henüz dosya yüklenmemiş' +
                    '</div>';
                fileCount.textContent = '(0 dosya)';
                return;
            }

            fileCount.textContent = '(' + files.length + ' dosya)';
            filesList.innerHTML = '';

            files.forEach(function(file, index) {
                var fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.style.cssText = 'margin-bottom: 8px; background: white; border: 1px solid #e2e8f0;';

                var fileIcon = getFileIcon(file.originalName);
                var fileSize = formatFileSize(file.fileSize);
                var uploadDate = formatDate(file.uploadDate);

                fileItem.innerHTML =
                    '<div style="flex: 1;">' +
                        '<div style="display: flex; justify-content: space-between; align-items: center;">' +
                            '<div style="display: flex; align-items: center; gap: 8px;">' +
                                '<i class="' + fileIcon.icon + '" style="color: ' + fileIcon.color + '; font-size: 1.2rem;"></i>' +
                                '<span class="file-name" style="font-weight: 600;">' + file.originalName + '</span>' +
                            '</div>' +
                            '<div style="display: flex; gap: 6px;">' +
                                '<button type="button" class="btn btn-sm" style="background: #3b82f6; color: white; padding: 4px 8px; font-size: 0.75rem;" onclick="downloadFile(\'' + file.fileName + '\')" title="İndir">' +
                                    '<i class="fas fa-download"></i>' +
                                '</button>' +
                                '<button type="button" class="remove-file-btn" onclick="deleteExistingFile(\'' + file.fileName + '\')" title="Sil">&times;</button>' +
                            '</div>' +
                        '</div>' +
                        '<div style="display: flex; justify-content: space-between; margin-top: 6px; font-size: 0.8rem; color: #64748b;">' +
                            '<span><i class="fas fa-weight"></i> ' + fileSize + '</span>' +
                            '<span><i class="fas fa-calendar"></i> ' + uploadDate + '</span>' +
                        '</div>' +
                    '</div>';

                filesList.appendChild(fileItem);
            });
        }

        // Dosya indirme
        function downloadFile(fileName) {
            console.log('Dosya indiriliyor:', fileName);
            var url = '/Request/DownloadFile?requestId=@Model.Id&fileName=' + encodeURIComponent(fileName);
            window.open(url, '_blank');
        }

        // Dosya silme
        function deleteExistingFile(fileName) {
            if (confirm('Bu dosyayı silmek istediğinizden emin misiniz?\n\nDosya: ' + fileName)) {
                console.log('Dosya siliniyor:', fileName);

                fetch('@Url.Action("DeleteFile")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'requestId=@Model.Id&fileName=' + encodeURIComponent(fileName)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('✅ Dosya başarıyla silindi: ' + fileName, 'success');
                        loadExistingFiles(); // Listeyi yenile
                    } else {
                        showNotification('❌ Dosya silinemedi: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Dosya silme hatası:', error);
                    showNotification('❌ Dosya silinirken bağlantı hatası oluştu', 'error');
                });
            }
        }

        // Dosya yükleme sistemini kur
        function setupFileUpload() {
            var uploadArea = document.getElementById('fileUploadArea');
            var fileInput = document.getElementById('fileInput');
            var fileList = document.getElementById('newFileList');

            if (!uploadArea || !fileInput || !fileList) {
                console.error('Dosya yükleme elementleri bulunamadı');
                return;
            }

            // Click to select
            uploadArea.addEventListener('click', function() {
                fileInput.click();
            });

            // File selection
            fileInput.addEventListener('change', function() {
                handleFiles(this.files);
                this.value = ''; // Input'u temizle
            });

            // Drag and drop
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragenter', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', function(e) {
                if (!uploadArea.contains(e.relatedTarget)) {
                    uploadArea.classList.remove('dragover');
                }
            });

            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                handleFiles(e.dataTransfer.files);
            });

            function handleFiles(files) {
                console.log('Dosyalar yükleniyor:', files.length);
                Array.from(files).forEach(function(file) {
                    if (validateFile(file)) {
                        uploadFileImmediately(file);
                    }
                });
            }

            function validateFile(file) {
                var allowedTypes = ['.doc', '.docx', '.pdf', '.xls', '.xlsx', '.png', '.jpg', '.jpeg', '.csv'];
                var fileExtension = '.' + file.name.split('.').pop().toLowerCase();

                if (allowedTypes.indexOf(fileExtension) === -1) {
                    showNotification('❌ Desteklenmeyen dosya formatı: ' + fileExtension + '\n\nDesteklenen formatlar: ' + allowedTypes.join(', '), 'error');
                    return false;
                }

                if (file.size > 10 * 1024 * 1024) { // 10MB
                    showNotification('❌ Dosya boyutu çok büyük: ' + formatFileSize(file.size) + '\n\nMaksimum boyut: 10MB', 'error');
                    return false;
                }

                return true;
            }

            function uploadFileImmediately(file) {
                console.log('Dosya yükleniyor:', file.name, file.size);

                var formData = new FormData();
                formData.append('file', file);
                formData.append('requestId', '@Model.Id');

                // Show progress
                var progressId = 'upload-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
                var progressItem = document.createElement('div');
                progressItem.className = 'file-item';
                progressItem.id = progressId;
                progressItem.style.cssText = 'margin-bottom: 8px; background: #f0f9ff; border: 2px solid #0ea5e9;';
                progressItem.innerHTML =
                    '<div style="flex: 1;">' +
                        '<div style="display: flex; justify-content: space-between; align-items: center;">' +
                            '<div style="display: flex; align-items: center; gap: 8px;">' +
                                '<div class="upload-spinner"></div>' +
                                '<span class="file-name" style="font-weight: 600;">' + file.name + '</span>' +
                            '</div>' +
                            '<span style="color: #0ea5e9; font-weight: 600; font-size: 0.8rem;">YÜKLENIYOR</span>' +
                        '</div>' +
                        '<div style="color: #0369a1; font-size: 0.8rem; margin-top: 4px;">' +
                            '<i class="fas fa-upload"></i> ' + formatFileSize(file.size) + ' yükleniyor...' +
                        '</div>' +
                    '</div>';

                fileList.appendChild(progressItem);

                fetch('@Url.Action("UploadFile")', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('Upload response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Upload response:', data);
                    progressItem.remove();

                    if (data.success) {
                        showNotification('✅ Dosya başarıyla yüklendi: ' + data.fileName, 'success');
                        loadExistingFiles(); // Listeyi yenile
                    } else {
                        showNotification('❌ Dosya yüklenemedi: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Upload hatası:', error);
                    progressItem.remove();
                    showNotification('❌ Dosya yüklenirken bağlantı hatası oluştu', 'error');
                });
            }
        }

        // Yardımcı fonksiyonlar
        function getFileIcon(fileName) {
            var extension = fileName.split('.').pop().toLowerCase();

            switch(extension) {
                case 'pdf':
                    return { icon: 'fas fa-file-pdf', color: '#ef4444' };
                case 'doc':
                case 'docx':
                    return { icon: 'fas fa-file-word', color: '#2563eb' };
                case 'xls':
                case 'xlsx':
                    return { icon: 'fas fa-file-excel', color: '#16a34a' };
                case 'png':
                case 'jpg':
                case 'jpeg':
                    return { icon: 'fas fa-file-image', color: '#7c3aed' };
                case 'csv':
                    return { icon: 'fas fa-file-csv', color: '#f59e0b' };
                default:
                    return { icon: 'fas fa-file', color: '#64748b' };
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            var k = 1024;
            var sizes = ['Bytes', 'KB', 'MB', 'GB'];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        function formatDate(dateString) {
            var date = new Date(dateString);
            return date.toLocaleDateString('tr-TR', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function showNotification(message, type) {
            // Eski notification'ları temizle
            var existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(function(notif) {
                notif.remove();
            });

            var notification = document.createElement('div');
            notification.className = 'notification show';
            notification.style.background = type === 'success' ?
                'linear-gradient(135deg, #10b981, #059669)' :
                'linear-gradient(135deg, #ef4444, #dc2626)';
            notification.style.whiteSpace = 'pre-line'; // Çok satırlı mesajlar için
            notification.innerHTML =
                '<button class="close-btn" onclick="this.parentElement.remove()">&times;</button>' +
                '<span>' + message + '</span>';

            document.body.appendChild(notification);

            setTimeout(function() {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }
    </script>
}