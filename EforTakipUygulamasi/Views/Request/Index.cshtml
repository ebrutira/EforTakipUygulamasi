@model IEnumerable<EforTakipUygulamasi.Models.Request>
@{
    ViewData["Title"] = "Talepler";
}

<div class="container">
    <!-- Başarı/Hata Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="notification show" id="successNotification">
            <button class="close-btn" onclick="hideNotification('successNotification')">&times;</button>
            <span>@TempData["SuccessMessage"]</span>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="notification show" id="errorNotification" style="background: #e53e3e;">
            <button class="close-btn" onclick="hideNotification('errorNotification')">&times;</button>
            <span>@TempData["ErrorMessage"]</span>
        </div>
    }

    <!-- Dashboard Stats -->
    <div class="dashboard-stats">
        <div class="stat-card">
            <div class="stat-value" id="totalItems">@Model.Count()</div>
            <div class="stat-label">Toplam İş</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="inProgress">@Model.Count(r => r.Status == EforTakipUygulamasi.Common.RequestStatusEnum.InProgress)</div>
            <div class="stat-label">Devam Eden</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="totalHours">@Model.Sum(r => r.TotalHours).ToString("F0")</div>
            <div class="stat-label">Toplam Saat</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="overdueItems">@Model.Count(r => r.Deadline.HasValue && r.Deadline.Value.Date < DateTime.Today && r.Status != EforTakipUygulamasi.Common.RequestStatusEnum.Completed)</div>
            <div class="stat-label">Geciken</div>
        </div>
    </div>

    <!-- Controls -->
    <div class="controls">
        <div class="filter-group">
            <!-- Sıralama seçeneği -->
            <select class="select" id="sortSelect">
                <option value="smart">Akıllı Sıralama</option>
                <option value="deadline">Teslim Tarihine Göre</option>
                <option value="size">İş Büyüklüğüne Göre</option>
                <option value="priority">Önceliğe Göre</option>
                <option value="name">İsme Göre</option>
            </select>

            <select class="select" id="statusFilter">
                <option value="">Tüm Durumlar</option>
                <option value="New">Yeni</option>
                <option value="InProgress">Devam Eden</option>
                <option value="Testing">Test</option>
                <option value="Completed">Tamamlandı</option>
                <option value="Cancelled">İptal</option>
            </select>
            <select class="select" id="sizeFilter">
                <option value="">Tüm Büyüklükler</option>
                <option value="FastTrack">Fast Track</option>
                <option value="XS">XS</option>
                <option value="S">S</option>
                <option value="M">M</option>
                <option value="L">L</option>
                <option value="XL">XL</option>
            </select>
            <input type="text" class="input" placeholder="İş ara..." id="searchInput">
        </div>
        <a href="@Url.Action("Create")" class="btn btn-primary">+ Yeni İş Ekle</a>
    </div>

    <!-- Work Items Table -->
    <div class="work-items">
        <div class="table-header">
            <div>İş Başlığı</div>
            <div>Durum</div>
            <div>İş Büyüklüğü</div>
            <div>Analiz</div>
            <div>Yazılım</div>
            <div>KKT/Preprod</div>
            <div>Toplam</div>
            <div>Teslim Tarihi</div>
        </div>
        <div id="workItemsList">
            @if (Model != null && Model.Any())
            {
                @foreach (var request in Model)
                {
                    <div class="work-item"
                         data-status="@((int)request.Status)"
                         data-priority="@((int)request.Priority)"
                         data-deadline="@(request.Deadline?.ToString("yyyy-MM-dd") ?? "")"
                         data-total-hours="@request.TotalHours"
                         data-name="@request.Name"
                         data-description="@(request.Description ?? "")"
                         data-assignee="@(request.Assignee ?? "")"
                         onclick="editRequest(@request.Id)">
                        <div class="work-title">@request.Name</div>
                        <div>
                            <span class="status-badge status-@request.Status.ToString().ToLower()">
                                @GetStatusText(request.Status)
                            </span>
                        </div>
                        <div>
                            <span class="difficulty-badge @GetSizeBadgeClass(request.Size)">
                                @request.Size
                            </span>
                        </div>
                        <div class="effort-hours">@request.AnalystHours.ToString("F1")h</div>
                        <div class="effort-hours">@request.DeveloperHours.ToString("F1")h</div>
                        <div class="effort-hours">@((request.KKTHours + request.PreprodHours).ToString("F1"))h</div>
                        <div class="effort-hours"><strong>@request.TotalHours.ToString("F1")h</strong></div>
                        <div class="deadline @GetDeadlineClass(request.Deadline) @(request.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Completed || request.Status == EforTakipUygulamasi.Common.RequestStatusEnum.Cancelled ? "completed-task" : "")">
                            @(request.Deadline?.ToString("dd.MM.yyyy") ?? "-")
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="text-align: center; padding: 3rem; color: #999;">
                    <i class="fas fa-inbox fa-3x" style="margin-bottom: 1rem;"></i>
                    <p>Henüz iş bulunmuyor.</p>
                    <a href="@Url.Action("Create")" class="btn btn-primary" style="margin-top: 1rem;">İlk İşi Oluştur</a>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetStatusText(EforTakipUygulamasi.Common.RequestStatusEnum status)
    {
        return status switch
        {
            EforTakipUygulamasi.Common.RequestStatusEnum.New => "Yeni",
            EforTakipUygulamasi.Common.RequestStatusEnum.InProgress => "Devam Eden",
            EforTakipUygulamasi.Common.RequestStatusEnum.Testing => "Test",
            EforTakipUygulamasi.Common.RequestStatusEnum.OnHold => "Beklemede",
            EforTakipUygulamasi.Common.RequestStatusEnum.Completed => "Tamamlandı",
            EforTakipUygulamasi.Common.RequestStatusEnum.Cancelled => "İptal",
            _ => status.ToString()
        };
    }

    string GetSizeBadgeClass(EforTakipUygulamasi.Common.TShirtSizeEnum size)
    {
        return size switch
        {
            EforTakipUygulamasi.Common.TShirtSizeEnum.FastTrack => "diff-1",
            EforTakipUygulamasi.Common.TShirtSizeEnum.XS => "diff-1",
            EforTakipUygulamasi.Common.TShirtSizeEnum.S => "diff-2",
            EforTakipUygulamasi.Common.TShirtSizeEnum.M => "diff-3",
            EforTakipUygulamasi.Common.TShirtSizeEnum.L => "diff-4",
            EforTakipUygulamasi.Common.TShirtSizeEnum.XL => "diff-5",
            _ => "diff-2"
        };
    }

    string GetDeadlineClass(DateTime? deadline)
    {
        if (!deadline.HasValue) return "normal";

        var today = DateTime.Today;
        var diffDays = (deadline.Value.Date - today).Days;

        if (diffDays < 0) return "overdue";      // Kırmızı - Gecikmiş
        if (diffDays <= 3) return "critical";    // Turuncu - 0-3 gün
        if (diffDays <= 7) return "warning";     // Sarı - 4-7 gün
        return "normal";                         // Yeşil - 7+ gün
    }
}

@section Scripts {
    <style>
        /* Deadline renk geçişleri - aktif işler için */
        .deadline.overdue:not(.completed-task) {
            color: #dc2626;
            font-weight: 700;
            background: linear-gradient(90deg, #fee2e2, transparent);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border-left: 3px solid #dc2626;
        }

        .deadline.critical:not(.completed-task) {
            color: #ea580c;
            font-weight: 600;
            background: linear-gradient(90deg, #fed7aa, transparent);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border-left: 3px solid #ea580c;
        }

        .deadline.warning:not(.completed-task) {
            color: #d97706;
            font-weight: 500;
            background: linear-gradient(90deg, #fef3c7, transparent);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border-left: 3px solid #d97706;
        }

        .deadline.normal:not(.completed-task) {
            color: #059669;
            background: linear-gradient(90deg, #d1fae5, transparent);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border-left: 3px solid #059669;
        }

        /* Tamamlanan işlerin deadline'ı için - GRİ */
        .deadline.completed-task {
            color: #6b7280 !important;
            font-weight: normal !important;
            background: none !important;
            border: none !important;
            opacity: 0.7;
        }
    </style>

    <script>
        $(document).ready(function() {
            // Sayfa yüklendiğinde sıralama uygula
            applySorting();

            // Sıralama değiştiğinde
            $('#sortSelect').on('change', applySorting);

            // Filtreleme ve arama
            $('#statusFilter, #sizeFilter').on('change', filterItems);
            $('#searchInput').on('input', filterItems);

            // Otomatik notification gizleme
            setTimeout(function() {
                $('.notification').removeClass('show');
            }, 3000);
        });

        function applySorting() {
            const sortType = $('#sortSelect').val();
            var $workItems = $('.work-item');
            var items = [];

            // Tüm item'ları topla
            $workItems.each(function() {
                var $this = $(this);
                items.push({
                    element: $this,
                    status: parseInt($this.data('status')),
                    priority: parseInt($this.data('priority')),
                    deadline: $this.data('deadline'),
                    totalHours: parseFloat($this.data('total-hours') || 0),
                    name: $this.data('name')
                });
            });

            // Sıralama mantığı
            items.sort(function(a, b) {
                // 1. İPTAL VE TAMAMLANAN İŞLER HER ZAMAN EN ALTA
                var aFinished = (a.status === 5 || a.status === 6); // Completed veya Cancelled
                var bFinished = (b.status === 5 || b.status === 6);

                if (aFinished && !bFinished) return 1;  // a en alta
                if (!aFinished && bFinished) return -1; // b en alta

                // 2. Aktif işler için seçilen sıralamayı uygula
                if (!aFinished && !bFinished) {
                    switch (sortType) {
                        case 'deadline':
                            return compareByDeadline(a, b);
                        case 'size':
                            return compareBySize(a, b);
                        case 'priority':
                            return b.priority - a.priority; // Yüksek önce
                        case 'name':
                            return a.name.localeCompare(b.name);
                        default: // smart
                            return compareByDeadline(a, b); // Varsayılan: deadline
                    }
                }

                // 3. İkisi de bitmiş ise normal sırala
                return 0;
            });

            // DOM'u yeniden düzenle
            var $container = $('#workItemsList');
            items.forEach(function(item) {
                $container.append(item.element);
            });
        }

        function compareByDeadline(a, b) {
            // Deadline olmayanlar sona
            if (!a.deadline && !b.deadline) return 0;
            if (!a.deadline) return 1;
            if (!b.deadline) return -1;

            // Gecikmiş olanlar en önce
            var dateA = new Date(a.deadline);
            var dateB = new Date(b.deadline);
            var today = new Date();

            var aOverdue = dateA < today;
            var bOverdue = dateB < today;

            if (aOverdue && !bOverdue) return -1;
            if (!aOverdue && bOverdue) return 1;

            // Tarihe göre sırala
            return dateA - dateB;
        }

        function compareBySize(a, b) {
            var sizeOrder = ['FastTrack', 'XS', 'S', 'M', 'L', 'XL'];
            var aSize = getSizeFromHours(a.totalHours);
            var bSize = getSizeFromHours(b.totalHours);
            return sizeOrder.indexOf(aSize) - sizeOrder.indexOf(bSize);
        }

        function getSizeFromHours(hours) {
            var manDays = hours / 8;
            if (manDays <= 5) return 'FastTrack';
            if (manDays <= 10) return 'XS';
            if (manDays <= 25) return 'S';
            if (manDays <= 50) return 'M';
            if (manDays <= 100) return 'L';
            return 'XL';
        }

        function editRequest(id) {
            window.location.href = '@Url.Action("Edit", "Request")/' + id;
        }

        function hideNotification(id) {
            document.getElementById(id).classList.remove('show');
        }

        function filterItems() {
            var searchTerm = $('#searchInput').val().toLowerCase();
            var statusFilter = $('#statusFilter').val();
            var sizeFilter = $('#sizeFilter').val();

            $('#workItemsList .work-item').each(function() {
                var $item = $(this);
                var name = $item.data('name').toLowerCase();
                var description = ($item.data('description') || '').toLowerCase();
                var assignee = ($item.data('assignee') || '').toLowerCase();
                var status = $item.find('.status-badge').text().trim();
                var size = $item.find('.difficulty-badge').text().trim();

                var matchesSearch = !searchTerm ||
                    name.includes(searchTerm) ||
                    description.includes(searchTerm) ||
                    assignee.includes(searchTerm);

                var matchesStatus = !statusFilter || status.includes(getStatusText(statusFilter));
                var matchesSize = !sizeFilter || size === sizeFilter;

                if (matchesSearch && matchesStatus && matchesSize) {
                    $item.show();
                } else {
                    $item.hide();
                }
            });
        }

        function getStatusText(status) {
            const statusMap = {
                'New': 'Yeni',
                'InProgress': 'Devam Eden',
                'Testing': 'Test',
                'Completed': 'Tamamlandı',
                'Cancelled': 'İptal'
            };
            return statusMap[status] || status;
        }
    </script>
}