@model EforTakipUygulamasi.Models.Request

@{
    ViewData["Title"] = "Yeni Talep Oluştur";
}

<div class="container">
    <h1>Yeni Talep Oluştur</h1>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="notification show" style="background: linear-gradient(135deg, #ef4444, #dc2626);">
            @TempData["ErrorMessage"]
            <button class="close-btn" onclick="this.parentElement.remove()">&times;</button>
        </div>
    }

    <div class="work-items">
        <div style="padding: 2rem;">
            <form method="post" id="createForm">

                <!-- Temel Bilgiler -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="ProjectId">Proje ID</label>
                        <input type="text"
                               class="form-input project-id-field"
                               id="ProjectId"
                               name="ProjectId"
                               value="@Model.ProjectId"
                               placeholder="@ViewBag.SuggestedProjectId" />
                        <small style="color: #64748b;">Boş bırakırsanız otomatik oluşturulur: @ViewBag.SuggestedProjectId</small>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="Name">Talep Adı *</label>
                        <input type="text"
                               class="form-input"
                               id="Name"
                               name="Name"
                               value="@Model.Name"
                               placeholder="Örn: Dashboard Geliştirme"
                               required />
                    </div>
                </div>

                <!-- Açıklama -->
                <div class="form-group">
                    <label class="form-label" for="Description">Açıklama</label>
                    <textarea class="form-input textarea"
                              id="Description"
                              name="Description"
                              rows="4"
                              placeholder="Talep detaylarını açıklayın...">@Model.Description</textarea>
                </div>

                <!-- Tarihler -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="Deadline">Teslim Tarihi</label>
                        <input type="date"
                               class="form-input"
                               id="Deadline"
                               name="Deadline"
                               value="@Model.Deadline?.ToString("yyyy-MM-dd")" />
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="KKTDeadline">KKT Deadline</label>
                        <input type="date"
                               class="form-input"
                               id="KKTDeadline"
                               name="KKTDeadline"
                               value="@Model.KKTDeadline?.ToString("yyyy-MM-dd")" />
                    </div>
                </div>

                <!-- Durum ve Öncelik -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="Status">İş Durumu *</label>
                        <select class="form-input" id="Status" name="Status" required>
                            <option value="1" selected>Bekleyen</option>
                            <option value="2">Devam Eden</option>
                            <option value="3">Test</option>
                            <option value="5">Tamamlandı</option>
                            <option value="6">İptal</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="Priority">Öncelik</label>
                        <select class="form-input" id="Priority" name="Priority">
                            <option value="1">Düşük</option>
                            <option value="2" selected>Orta</option>
                            <option value="3">Yüksek</option>
                            <option value="4">Kritik</option>
                        </select>
                    </div>
                </div>

                <!-- Efor Saatleri -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="AnalystHours">Analist Saat</label>
                        <input type="number"
                               class="form-input"
                               id="AnalystHours"
                               name="AnalystHours"
                               value="@Model.AnalystHours"
                               min="0"
                               step="0.5"
                               placeholder="0.0" />
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="DeveloperHours">Yazılım Saat</label>
                        <input type="number"
                               class="form-input"
                               id="DeveloperHours"
                               name="DeveloperHours"
                               value="@Model.DeveloperHours"
                               min="0"
                               step="0.5"
                               placeholder="0.0" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="KKTHours">KKT Saat</label>
                        <input type="number"
                               class="form-input"
                               id="KKTHours"
                               name="KKTHours"
                               value="@Model.KKTHours"
                               min="0"
                               step="0.5"
                               placeholder="0.0" />
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="Assignee">Atanan Kişi</label>
                        <input type="text"
                               class="form-input"
                               id="Assignee"
                               name="Assignee"
                               value="@Model.Assignee"
                               placeholder="Örn: Ahmet Yılmaz" />
                    </div>
                </div>

                <!-- İş Büyüklüğü Hesaplaması -->
                <div class="form-group">
                    <label class="form-label">İş Büyüklüğü Analizi</label>
                    <div style="background: #f8fafc; padding: 1rem; border-radius: 8px; border: 1px solid #e2e8f0;">
                        <div style="display: flex; justify-content: space-around; text-align: center;">
                            <div>
                                <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;" id="totalHours">0.0</div>
                                <div style="font-size: 0.8rem; color: #64748b;">Toplam Saat</div>
                            </div>
                            <div>
                                <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;" id="manDays">0.0</div>
                                <div style="font-size: 0.8rem; color: #64748b;">Adam-Gün</div>
                            </div>
                            <div>
                                <div style="font-size: 1.2rem; font-weight: bold;" id="tshirtSize">Fast Track</div>
                                <div style="font-size: 0.8rem; color: #64748b;">İş Büyüklüğü</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Dosya Yükleme -->
                <div class="form-group">
                    <label class="form-label">Dosya Ekle</label>
                    <div class="file-upload-area" id="fileUploadArea">
                        <div style="text-align: center; padding: 1rem;">
                            <p>Dosyaları buraya sürükleyin veya tıklayın</p>
                            <input type="file" id="fileInput" multiple style="display: none;"
                                   accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg,.csv">
                            <small style="color: #64748b;">PDF, Word, Excel, Resim, CSV (Max: 10MB)</small>
                        </div>
                    </div>
                    <div id="uploadedFilesList" style="margin-top: 1rem;"></div>
                </div>

                <!-- Form Butonları -->
                <div style="display: flex; gap: 1rem; justify-content: end; margin-top: 2rem;">
                    <a href="@Url.Action("Index")" class="btn btn-secondary">İptal</a>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Talep Oluştur</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    let uploadedFiles = [];

    // Dosya yükleme işlemleri
    document.getElementById('fileUploadArea').addEventListener('click', function() {
        document.getElementById('fileInput').click();
    });

    document.getElementById('fileUploadArea').addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('dragover');
    });

    document.getElementById('fileUploadArea').addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
    });

    document.getElementById('fileUploadArea').addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
        const files = Array.from(e.dataTransfer.files);
        handleFiles(files);
    });

    document.getElementById('fileInput').addEventListener('change', function(e) {
        const files = Array.from(this.files);
        handleFiles(files);
    });

    function handleFiles(files) {
        files.forEach(file => {
            if (file.size > 10 * 1024 * 1024) {
                alert(file.name + ' dosyası 10MB\'dan büyük');
                return;
            }

            const allowedTypes = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.png', '.jpg', '.jpeg', '.csv'];
            const fileExt = '.' + file.name.split('.').pop().toLowerCase();

            if (!allowedTypes.includes(fileExt)) {
                alert(file.name + ' desteklenmeyen format');
                return;
            }

            uploadedFiles.push({
                file: file,
                name: file.name,
                size: file.size
            });

            updateFilesList();
        });
    }

    function updateFilesList() {
        const filesList = document.getElementById('uploadedFilesList');

        if (uploadedFiles.length === 0) {
            filesList.innerHTML = '';
            return;
        }

        const filesHtml = uploadedFiles.map((fileObj, index) => `
            <div class="file-item">
                <div>
                    <span class="file-name">${fileObj.name}</span>
                    <span class="file-size">(${formatFileSize(fileObj.size)})</span>
                </div>
                <button type="button" class="remove-file-btn" onclick="removeFile(${index})">×</button>
            </div>
        `).join('');

        filesList.innerHTML = `
            <div style="background: #f8fafc; padding: 1rem; border-radius: 8px;">
                <h4>Eklenecek Dosyalar (${uploadedFiles.length})</h4>
                ${filesHtml}
            </div>
        `;
    }

    function removeFile(index) {
        uploadedFiles.splice(index, 1);
        updateFilesList();
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function calculateTotals() {
        const analyst = parseFloat(document.getElementById('AnalystHours').value) || 0;
        const developer = parseFloat(document.getElementById('DeveloperHours').value) || 0;
        const kkt = parseFloat(document.getElementById('KKTHours').value) || 0;

        const totalHours = analyst + developer + kkt;
        const manDays = totalHours / 8;

        let tshirtSize = 'Fast Track';
        let color = '#28a745';

        if (manDays > 100) { tshirtSize = 'XL'; color = '#6f42c1'; }
        else if (manDays > 50) { tshirtSize = 'L'; color = '#dc3545'; }
        else if (manDays > 25) { tshirtSize = 'M'; color = '#fd7e14'; }
        else if (manDays > 10) { tshirtSize = 'S'; color = '#ffc107'; }
        else if (manDays > 5) { tshirtSize = 'XS'; color = '#28a745'; }

        document.getElementById('totalHours').textContent = totalHours.toFixed(1);
        document.getElementById('manDays').textContent = manDays.toFixed(1);
        document.getElementById('tshirtSize').textContent = tshirtSize;
        document.getElementById('tshirtSize').style.color = color;
    }

    document.getElementById('AnalystHours').addEventListener('input', calculateTotals);
    document.getElementById('DeveloperHours').addEventListener('input', calculateTotals);
    document.getElementById('KKTHours').addEventListener('input', calculateTotals);

    document.addEventListener('DOMContentLoaded', calculateTotals);

    // Form submit - dosyalar varsa önce talebi oluştur sonra dosyaları yükle
    document.getElementById('createForm').addEventListener('submit', async function(e) {
        if (uploadedFiles.length === 0) {
            // Dosya yoksa normal submit
            return;
        }

        e.preventDefault();

        const submitBtn = document.getElementById('submitBtn');
        submitBtn.disabled = true;
        submitBtn.innerHTML = 'Oluşturuluyor...';

        try {
            // Önce talebi oluştur
            const formData = new FormData(this);

            const response = await fetch('/Request/Create', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Talep oluşturuldu, şimdi dosyaları yükle
                const allRequests = await fetch('/Request/GetAllJson').then(r => r.json());
                const lastRequest = allRequests[allRequests.length - 1];

                // Dosyaları yükle
                for (const fileObj of uploadedFiles) {
                    const fileFormData = new FormData();
                    fileFormData.append('file', fileObj.file);

                    await fetch(`/Request/UploadFile?requestId=${lastRequest.Id}`, {
                        method: 'POST',
                        body: fileFormData
                    });
                }

                window.location.href = '/Request/Index';
            } else {
                alert('Talep oluşturulamadı');
            }
        } catch (error) {
            alert('Hata: ' + error.message);
        }

        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Talep Oluştur';
    });
</script>